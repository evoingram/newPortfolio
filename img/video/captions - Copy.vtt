WEBVTT - Header of File

1
00:00:00.000 --> 00:00:04.999
- This is a Lionfish.


2
00:00:05.000 --> 00:00:09.999
- This is an Anemone.

3
00:00:10.000 --> 00:00:14.999
- This is a Clownfish.

4
00:00:15.000 --> 00:00:19.999
- This is a Sea Horse.

5
00:00:20.000 --> 00:00:24.000
- This is a Crab.

Hello, my name's Erica Ingram.
And I am a recent Lambda School grad seeking a position as I transition careers. 
Since my background is pretty non-traditional, I'm here to 
discuss that background and walk through a few of my projects to 
show you my capabilities.  
First, I'll go over a little bit about me prior to Lambda, 
my time at Lambda, some projects I've done, and then we'll close 
with a recap and contact methods.

I've been a hard worker and leader by example my whole life.  
My first job was detasseling for four full seasons.  
I've had jobs doing many different things, but much of my past has been technology adjacent.  
Iâ€™ve worked in retail, customer service, as a project manager @ Kinkos, 
run a news department for a gaming league with a readership of over 500k, 
and had a book published as well as 
articles featured on the front cover of both Massive and Computer Games Magazines.

I am a leader by example even when I am doing things for fun. 
For a year and a half, I belonged to a guild in World of Warcraft 
which was 25th in the U.S. out of upwards of 10,000 guilds to clear Sunwell Plateau, 
and was present for and participated in each and every boss kill. 
I was known for combat log analysis and helped mentor junior raiders by deeply 
analyzing logs and collaborating with other guildies 
to help juniors improve their rotations.  

Until I started my business, I built my own computers for fun.  
So although I did many non-tech jobs, I never strayed too far away from technology.

Now, I've run my own court transcription business remotely for over a decade, 
and as is true for many solo-entrepreneurs, efficiency was key.  

So I spent three years developing software to automate as much of my workflow 
as possible with VBA and MySQL, integrating it with several APIs and programs.  
I used text-analyzing software on over 10,000 transcript pages 
to produce autocorrect entries in Word via VBA to improve typing speed/accuracy 
and automate creation of those entries via VBA.  
My transcripts offer completely unique features such as authority hyperlinking 
via CourtListener and .gov sites as well as tables of authority via VBA automation, 
and I consistently produce twice the number of transcript pages as 
most of my colleagues due to the same automation.

Now, from October until I graduated at the end of June, I attended Lambda School, 
a computer-science academy that offers an immersive, online nine-month program 
to prepare students for a successful career in web development. 

For six months from January to June of this year, I served as team lead at Lambda School, 
where I performed code review & 1:1s for every student on team twice per week, 
hosted two stand-up meetings with six to seven students weekly, 
gave presentations to facilitate students' growth during stand-ups, 
mentored & provided feedback to students on improvement areas, 
tracked attendance and other student metrics, 
and used Slackbot & Slack Workflow Builder to manage progress.  
My time as team lead also included serving as project lead for several build weeks, 
where you have seven days to complete from design through deployment 
a real-world web application using Agile development and Trello for project management.  
For those six months, I 
went to school 40 hours a week, team-lead 15 to 20 hours a week, and ran my business in between.

The Lambda curriculum is completed in an Agile format.

Each day is a module, each week a sprint, each unit four sprints.
Every day, there are Minimum Viable Product (MVP) goals and one to five stretch goals due for that day's project.
At the end of each week is a 'sprint challenge', which also has MVP and stretch goals.
Every day, you complete a module retrospective and every week a sprint retrospective.
Every day of the entire curriculum, you have both a stand-up with your team and team lead 
and also a 1:1 with your team lead to go over your code, discuss blockers, and stuff like that.
For 29 out of 31 weeks, I not only met MVP for each day, 
but completed at least one stretch goal per day and in most cases multiple stretch goals.
So I have lots of experience in Agile project management.

For the entire program, we are required to use Git and GitHub 
for version control with Lambda's Git flow process.
I've had over 5,800 GitHub contributions in the last year, and all of them via Git, 
so I also have lots of experience in Git.

I read several books on the side during my time at Lambda; the Gang of Four design patterns book,
Web Scalability for Startup Engineers by Artur Ejsmont, the Clean series by Bob Martin, 
and I'm currently reading Agile Estimation and Planning by Mike Cohn.

Next, let's go over some projects chronologically.
For each one, I'll go over some features of the site or app, its tech stack, 
technical challenges I ran into, 
and how I went above & beyond the curriculum for that particular project.

First, I'll go over the software I developed prior to Lambda.
Frankly, it's probably my worst written code, being my first big project ever, 
but I'm extremely proud of it because of how many problems I solved with it 
and how much I learned developing it.

As one might imagine, I use Word extensively for my business.
I was working so many hours, doing so many repetitive tasks, 
and got tired of entering the same data into more than one place 
and having to remember so many details that I felt could be automated with VBA.
So I wrote some VBA macros to deal with a couple of problems, integrating Excel.
Then I started writing little chunks of code for many other issues/problems 
I was having in my business that caused me to have to work so much.
I became good at debugging because, if I couldn't figure it out on my own, 
the feature simply wasn't going to happen.
But at first, admittedly, sometimes it would take me days or weeks to figure something out.

Eventually, stringing all these chunks of code together didn't make any sense.
I needed a full program to manage my business, and I wanted to know more about 
what Office does so I could automate absolutely everything possible in my business.
So I took two to three buses to the library up in Shoreline for several weeks to 
get Microsoft Office Specialist certifications because 
the King County Library system offers those tests for free.
Then I used that knowledge to automate even more stuff in my business 
and wrote a full-featured piece of software in Access with VBA and MySQL.
It manages my entire transcript production workflow, my schedule, tracks communication, 
and is integrated with many libraries such as WinSCP and Acrobat, among doing many other things.
It even has a speech recognition component.
I offer, for free because of VBA automation, transcript features no one else does like 
tables of authority and automatic citation and hyperlinking of authority 
(case law, rules, regulations) mentioned in transcripts, 
which attorneys charge their regular billable hourly rates for.

Now, I need to briefly go over the general workflow of my business because 
this will be relevant to a couple of projects later.
This software was designed to match the production workflow of the business 
using principles from the Getting Things Done system.
I designed the production workflow before developing the software for my business by writing down 
every single thing my business needed to do to produce a transcript in order 
and developing a workflow based on that list.


A job or transcript goes through four stages; intake, transcribe, audio-proof, & delivery.


In stage 1, intake, the customer fills out the order form online, the info is sent to the back end, 
& initial processing of the data happens, to include document creation, spellings confirmed, 
& folders, files Word shorthand auto-generated.


In stage 2, the audio is transcribed using my custom shorthand dictionary.
I created this dictionary by analyzing over 100,000 transcript pages for word count 
and developing shorthand based on that analysis.
An example of such shorthand would be typing 'dout' for 'do you think', 
where you type four letters and hit space, but 12 letters and the space appear.
This alone saves me untold amounts of time and effort.

In stage 3, the shorthand is automatically translated & document automatically formatted 
to a print-ready transcript.
Hyperlinks & citations are auto-generated & confirmed via either 
a database table, the CourtListener API, or by human Google search, 
& then the document is proofed to audio by an actual human, 
the gold standard in court transcription.

Stage 4, delivery, includes generation of a word index & various transcript formats, ZIP files for client delivery.
The invoice is settled, & last but not least the transcript is delivered to the customer.
Everything I just described here as automated are features I developed in this software.


Towards the end of the development of my Access program, I then wanted to 
build a speech recognition engine with automatic transcript and audio feeding from my Access software 
so that it would auto-learn from transcripts I already produced 
and also automatically produce a transcript with the current audio, 
and I actually did successfully do that with Audacity, VBA, batch files, and PocketSphinx.
I even created an Access form for it.
But sadly, PocketSphinx doesn't have nearly enough memory for what I need it to do, 
and I haven't had time to go back and remedy that, but it's in my future plans.

You can see the main window here.
Each of the four stages is automated in the sense that, when I've completed my tasks, 
I click the appropriate button and it will complete all the automated tasks I've programmed it to do.
You can see the general job information is here, and if I want to manually generate a document, 
I simply select it from this menu and press the button.


I have several other options on the left here for other business tasks I can do, 
like sending a price quote to a customer.
I simply enter the audio amount and turnaround time, click the button, 
and it will give me a price quote with the option to generate an email for the price quote 
as well as tell me if I can handle the job with my current schedule.
This last feature helps me not overbook myself or overcommit, a problem I had for many years.


What I'm most proud of about this software is how many problems I solved in my business with it, 
both business problems and personal weaknesses.
Its future is uncertain at the moment since I am currently developing 
updated and improved online versions of the same software.

The next one I want to go over is my portfolio, 
which was built with HTML, CSS, JavaScript, and the GitHub contributions calendar app.
The portfolio is a work of art I created with a theme of Olympic National Park, 
a beautiful and unique temperate rainforest just over on the peninsula from where I live 
that holds many amazing flora and fauna.
I made this after the first Lambda unit to both solidify the skills I had just learned 
as well as go above and beyond the curriculum with CSS animation.
One day on Codepen, I saw so many amazing examples of complicated pure CSS animation 
that I wanted my portfolio to have the same artsy look with a theme meaningful to me.

So that's exactly what I did.
I love Olympic National Park, so I did lots of research 
on the various animals and plants there as well as the landscape there to make a realistic scene.
I used Illustrator to make the crab, salmon, and log.
The water, beach, and sky were made using pure CSS.
This page is very heavy on CSS animation, and as such is minimally responsive.
All the animation you see is pure CSS animation.
The site has two responsive settings, mobile and desktop.
You can toggle between sunny and twinkling starry skies, 
and the cloud holds text that changes as you hover over different items.
This happens all while a crab walks on the beach and salmon swim in the water.
Click on the different options on the beach sign to see different modals.


My biggest technical challenge in this project was getting everything to line up properly.
This is quite a few items to line up one behind the other and in exactly the right spot, 
so most of my time on this project was spent doing just that.

The next project I'll discuss is my company's website, 
a very responsive website I built for my company after unit one, 
again to solidify my knowledge and go above and beyond the Lambda curriculum.
Adam Ingram took the background image and designed all wooden ad images you see on this website.
I built the website using HTML, CSS, JavaScript, and LESS.


This page features pure CSS gradients, a generally well-known overall site design, and a price quote calculator.
All internal links on the main page are a pop-up to other hidden sections on the same page.
As you saw, it contains animation in the showcase image and in each stripe going down the page.
The code is separated into separate LESS files and uses several mixins; 
one for animation, several for color manipulation according to color scheme, 
some flexbox ones, and an order/z-index one.
It has an image carousel to display pictures of unique transcript features, 
an inside-out underline animation for links, a FAQ with expandable questions, 
and a sticky header menu.
It's pretty responsive with desktop, tablet, and mobile versions.


It ranks in the 90th percentile in Google PageSpeed Insights, 
and on Lighthouse reports ranks 90 in performance and 100 for accessibility, best practices, and SEO.
It ranks on first-page results for "Seattle transcription" in Google and page two for Bing/Duckduckgo.
It is the fourth iteration of the company website over my company's history, 
so this site has come a long ways since its early days.

To the next project, now, once I started learning React in unit two and three, 
I knew I wanted to take my VB database online and to improve upon it.
So when I learned Node for back end work in the fourth unit at Lambda, 
I made a 126-endpoint, 23-table API built with Node, Express, Knex, bcrypt, and PostgreSQL.
It is fully tested & documented with Postman & has third-party API support for CourtListener, 
a wonderful publicly available case law API, Xero, PayPal, Wunderlist & Office.


The back end adheres to RESTful API best practices & gold standards as much as possible.
What you see here on the right is a sample response from one of the endpoints, and --

-- here's the schema.
You can view a list of endpoints, full Postman documentation, the schema, a couple of UML diagrams 
and the product vision document for the overall software in the readme if you want to check it out.
It's intended to support a React-Redux-TypeScript front end, which is still in planning stages due to time constraints.

This project goes above and beyond the Lambda curriculum because 
it utilizes fairly advanced SQL statements via Knex query builder, and because 
this back end was entirely 100 percent separately developed apart from school.
I used my Lambda knowledge to solve actual real business problems by 
making the back end portion of my earlier-developed VB software.


My biggest technical challenge was putting all the pieces together in the right way 
for this particular endpoint, and if you remember my spiel earlier 
about the general flow of the business, you can see this endpoint's data is designed like that as well.


In the future, I plan on adding search and sort parameters as well as testing via Cypress.

Something I did on the side at Lambda was take their Java back end curriculum.
It wasn't an option when I began attending, 
but normally you can choose one of two back end paths; Node or Java.
So my only option was Node at the time, but nonetheless the curriculum was available, 
so I took the time to learn it on the side because I knew it would make me more valuable as a developer.


After completing the curriculum, I then decided to make a version as identical as possible to the Node back end only in Java.
So this entire project and everything I learned prior to doing it went above and beyond the curriculum.
I built this back end with Java, SQL, Java Spring, JUnit 4, SLF4J, OAuth2, Swagger, PostgreSQL, and Maven.
It has roughly the same schema and does the same things, but with a couple of added user tables/features.


In contrast to the Node back end, the Java version supports multiple emails per user and different user roles, 
and its endpoints are more fully tested and support searching by different fields, sorting and query parameters, 
which the Node back end doesn't have at this time.
So the Java back end will have a few hundred more endpoints than the Node back end when complete for that reason.
I actually like this back end more than the Node one because of all its additional features.
You can view a list of endpoints and full Postman & Swagger documentation in the readme if you want to check it out.
This back end, like the Node version, is intended to support the same React-Redux-TypeScript front end.
This project was started during computer science, a few months after building the Node back end, and continues even now.


You can visit the front end intended for this back end at my GitHub, but it's still in planning stages, so I won't be covering it here.
There is some documentation you can check out, including an Adobe XD design file for it.

Now, we'll go over a couple of front end projects I've worked on.
The first front end project I want to show you is a NASA Images Library clone using the NASA API.
I love NASA, had never seen anybody do this particular clone before, 
and the original wasn't in React, so I felt it was a good project to help me solidify my knowledge 
and learn more above and beyond the curriculum after completing unit two and three, the React units in the Lambda curriculum.
I built this using React, Redux, Styled Components, Video React, Axios, and Cypress.
It also has a couple of animations, a rocker in the header and an astronaut in the footer.

Now, it's mostly like the original but I've improved it in a few ways.
The original has tooltips to display extra info in search results, 
but my version has a grid view to eliminate tooltips for accessibility improvement.
Mine saves screen space over the original.
The original displays a textfield displaying file URL and link to same URL, 
but my clone displays no textfield, only button to download file.


The original offers only three share options, whereas mine offers nine.
The original displays breadcrumbs in top left AND right side of detail page, 
whereas my clone displays same info on right side only of detail page.


The original displays keywords and links them to a search, 
but mine displays keywords unlinked because the search bar is always in header.
In the original, the search results always have a left-hand sidebar 
which contains search features that are not available until after first search, 
but the clone has a full-featured search function always in header & available from first search.
The left-hand sidebar is totally eliminated.


My biggest technical challenge on this project was the nesting and organization of components.
I spent several days on this and ended up collaborating with a Lambda colleague to solve this.
This project really helped me solidify my React understanding a ton, as I struggled greatly 
with understanding how it was organized and how data flowed through React apps.

In a future release, I plan to complete Cypress testing and refactor 
so it reflects what I've learned in the Clean series.
I'd also like to draw some UML diagrams for it during the refactor just as a further learning exercise.

Now we come to the Swaap app.
In every track at Lambda, each student goes through an eight-week 'apprenticeship', called Labs.
The student collaborates in two full continuous development cycles 
using Agile methodology from design through deployment, working in cross-functional teams.
The app I worked on in Labs was called Swaap, a way for people to gather, 
collect and stay in contact with people that you meet, 
to make the social and connecting aspect of events effortless, seamless and fun to do, 
to give courage and ability to less outgoing people to connect and network more comfortably, 
to unify the social and personal networking aspect of events 
and put that in the hands of participants instead of vendors.


The tech stack for the front end, which is what I mostly worked on, 
included React, Auth0, Reach Router, and Tailwind CSS.


Some features include giving users the ability to connect with each other through the app, 
getting and storing contacts in a fast and simple way, contact messaging ability, 
and finding out where you met the contacts.


My role in this project was to test all parts of landing page, make styling changes, 
add a contacts search feature, assist in planning phase & creation of product vision, 
and present release canvasses & product vision for approval to product owner.
The biggest challenges for me in Swaap were not so much technical, 
but rather learning what to actually test and putting together a coherent, cohesive, concise presentation for a non-technical audience.

This project was a build week project during the two computer science units, 
to build the famous Conway's Game of Life.
Lambda encouraged everyone to build it in their core language, 
which for me was JavaScript, because by that time we hadn't touched JavaScript in a couple of months.
I built this for that assignment using React, Node-Canvas, and Styled Components.
Our app had to meet several objectives which may be found in the repo.


Additionally, the assignment was to implement three of a selection of seven features:  

Create a few sample cell configurations that users can load and run
Add an option that creates a random cell configuration that users can run
Add additional cell properties, like color or size, and incorporate them into your visualization
Allow users to specify the speed of the simulation
Provide functionality to manually step through the simulation one generation at a time, 
as opposed to animating automatically
Allow users to change the dimension of the grid being displayed
Allow users to skip ahead n generations

So to go above and beyond the curriculum, we had to complete 
at least one stretch goal from the following objectives:  

Implement 2+ additional custom features, above
Deploy your app to a hosting service
Write a how-to guide or blog post 
Expand your simulation into the third dimension.
Explore alternate algorithms for finding the nth generation

My project includes a gradient animation in the background, which I had never done before, 
and selected features #1 through #6 from the first list 
as well as #1 through #3 from the stretch goals list for my project.
The big technical challenge for me on this project was 
visualizing translating the game from my head into actual code, 
which I overcame by simply just drawing out different aspects of this app on paper a lot.
You can read more about my day-to-day for this project 
and an overall report about Conway's Game of Life at the live web app.

The last project I'll cover just briefly because 
I learned some key things while completing this project.
This API is a blog back end I built with Node, Knex, Express, bcrypt, and PostgreSQL post-graduation.
Like the previous Node back end I built, it is tested and documented in Postman, 
and you can view all the documentation in the GitHub repo as well as a Postman collection of all the endpoints.
There are two notable parts to this API; one, I learned 
how to cache endpoint responses and caching is a feature of this API, 
and two, there are many query parameters for the GET endpoints in this back end.
You can filter both authors and posts by tag, 
and sort both authors and posts by their respective fields, ascending or descending.
You can also search by each field, partial matches included.
I also included most-liked and most-read endpoints, which returns a list of the 20 most liked or read posts.

There are several other things I learned on the side over my time at Lambda besides Java.
I learned TypeScript, Docker, UML, advanced Postman, advanced Agile methodology, 
PowerShell, advanced Visual Basic, system design, scalability, 
and object-oriented analysis and design, including 23 object-oriented design patterns.
I studied about 40-ish system designs to learn system architecture, 
including Twitter, Netflix, Pastebin, and others.
I completed the entire 2019 Master the Mainframe contest, parts one through three, 
and a few other mainframe-related badges, and am working on 2020's contest currently.
I spent hundreds of hours doing Leetcode and Cracking the Coding Interview problems in Python 
as well as reviewing both Anki flash cards I made and over 1,200 pages of handwritten notes.
I've also done research on how to be productive as quickly as possible at a new developer job, 
how to get the most out of stand-ups and 1:1s, and things like this.

What am I looking for in a career transition?  I am seeking a full-time position in 
software engineering at a company that values diversity and offers good work-life balance.
I plan on outsourcing all work and developing my company's software on the side as a hobby 
once I find the right position, so in no circumstances will I be doing both jobs at the same time.
My business is currently extremely reduced so I can devote my time to the job search, 
and it will continue this way into the foreseeable future.

In summary, during my time at Lambda, according to Sourcerer, I've written over 2.3 million lines of code 
in over 5,800 GitHub contributions, and I have both leadership and real-world development 
experience to draw from for my next venture.
I've used what I learned both in and outside Lambda to solve real-world problems in unique projects.
I've studied many things on the side, including several fundamental computer science books 
outside the Lambda curriculum, and have moderate Agile and Git experience.

I've received 14 references, seven on LinkedIn and seven more via Searchlight, 
a third-party service which hides nearly all the recommender's content from the recommendee 
in order to encourage candor, which may be sent on request via e-mail.
Here are some examples of them.

I'm a high-performing team player.
I learn quickly, and get results.
As you can tell from this video, I will always bring my A game, and will take my 
resourcefulness, discipline, empathy, respect, problem-solving ability, teamwork, and grit with me wherever I land.
You can contact me in the ways you see here, which are all provided on my portfolio below this video.

Thanks for watching and have a great day.
