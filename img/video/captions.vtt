WEBVTT - Project Walkthrough Video Captions by Erica Ingram

1
00:00:00.000 --> 00:00:06.210
Hello, my name's Erica Ingram.

2
00:00:06.211 --> 00:00:11.210
And I am a recent Lambda School grad 
seeking a position as I transition careers. 

3
00:00:11.211 --> 00:00:14.130
Since my background is pretty non-traditional, 

4
00:00:14.131 --> 00:00:16.000
I'm here to discuss that background and 

5
00:00:16.001 --> 00:00:19.280
walk through a few of my projects to show you my capabilities.  

6
00:00:19.281 --> 00:00:23.110
First, I'll go over a little bit about me prior to Lambda, 

7
00:00:23.1111 --> 00:00:26.150
my time at Lambda, some projects I've done, 

8
00:00:26.151 --> 00:00:29.100
and then we'll close 
with a recap and contact methods.

9
00:00:29.101 --> 00:00:34.180
I've been a hard worker and leader by example my whole life.

10
00:00:34.181 --> 00:00:40.140
My first job was detasseling for four full seasons.  
I've had jobs doing many different things, 

11
00:00:40.141 --> 00:00:43.999
but much of my past has been technology adjacent.  

12
00:00:44.000 --> 00:00:49.999
Iâ€™ve worked in retail, customer service, 
as a project manager @ Kinkos, 

13
00:00:50.000 --> 00:00:53.999
run a news department for a gaming league 
with a readership of over 500k, 

14
00:00:54.000 --> 00:00:56.999
and had a book published as well as 

15
00:00:57.000 --> 00:01:00.999
articles featured on the front cover of 
both Massive and Computer Games Magazines.

16
00:01:02.000 --> 00:01:06.999
I am a leader by example even when I am 
doing things for fun. 

17
00:01:07.000 --> 00:01:10.999
For a year and a half, I belonged to 
a guild in World of Warcraft 

18
00:01:11.000 --> 00:01:17.999
which was 25th in the U.S. out of upwards of 
10,000 guilds to clear Sunwell Plateau, 

19
00:01:18.000 --> 00:01:21.999
and was present for and participated in 
each and every boss kill. 

20
00:01:22.000 --> 00:01:25.999
I was known for combat log analysis and 
helped mentor junior raiders by 

21
00:01:26.000 --> 00:01:30.999
deeply analyzing logs and 
collaborating with other guildies 

22
00:01:31.000 --> 00:01:32.999
to help juniors improve their rotations.  

23
00:01:33.000 --> 00:01:36.999
Until I started my business, 
I built my own computers for fun.  

24
00:01:37.000 --> 00:01:41.999
So although I did many non-tech jobs, 
I never strayed too far away from technology.

25
00:01:42.000 --> 00:01:47.999
Now, I've run my own court transcription 
business remotely for over a decade, 

26
00:01:48.000 --> 00:01:52.999
and as is true for many solo-entrepreneurs, 
efficiency was key.  

27
00:01:53.000 --> 00:01:57.999
So I spent three years developing software 
to automate as much of my workflow

28
00:01:58.000 --> 00:02:03.999 
as possible with VBA and MySQL, 
integrating it with several APIs and programs.  

29
00:02:04.000 --> 00:02:08.999
I used text-analyzing software on 
over 10,000 transcript pages 

30
00:02:09.000 --> 00:02:14.999
to produce autocorrect entries in Word via VBA 
to improve typing speed and accuracy 

31
00:02:15.000 --> 00:02:18.999
and to automate creation of those entries via VBA.  

32
00:02:19.000 --> 00:02:23.999
My transcripts offer completely unique features 
such as authority hyperlinking 

33
00:02:24.000 --> 00:02:31.999
via CourtListener and .gov sites as well as 
tables of authority via VBA automation, 

34
00:02:32.000 --> 00:02:34.999
and I consistently produce twice 
the number of transcript pages as 

35
00:02:35.000 --> 00:02:37.999
most of my colleagues due to that same automation.

36
00:02:39.000 --> 00:02:44.999
Now, from October until I graduated at the end of June, 
I attended Lambda School, 

37
00:02:45.000 --> 00:02:49.999
a computer-science academy that offers an 
immersive, online nine-month program 

38
00:02:50.000 --> 00:02:53.999
to prepare students for a successful 
career in web development. 

39
00:02:57.000 --> 00:03:03.999
For six months from January to June of this year, 
I served as team lead at Lambda School, 

40
00:03:03.000 --> 00:03:08.999
where I performed code review & 1:1s 
for every student on the team twice per week, 

41
00:03:09.000 --> 00:03:12.999
hosted two stand-up meetings 
with six to seven students weekly, 

42
00:03:13.000 --> 00:03:16.999
gave presentations to facilitate 
students' growth during stand-ups, 

43
00:03:17.000 --> 00:03:20.999
mentored & provided feedback to students 
on improvement areas, 

44
00:03:21.000 --> 00:03:22.999
tracked attendance and other student metrics, 

45
00:03:23.000 --> 00:03:26.999
and used Slackbot & Slack Workflow Builder 
to manage progress.  

46
00:03:27.000 --> 00:03:32.999
My time as team lead also included 
serving as project lead for several build weeks, 

47
00:03:33.000 --> 00:03:36.999
where you have seven days to complete from design through deployment 

48
00:03:37.000 --> 00:03:42.999
a real-world web application using Agile development 
and Trello for project management.  

49
00:03:43.000 --> 00:03:43.999
For those six months, I went to school 40 hours a week, 

50
00:03:44.000 --> 00:03:49.999
team-lead 15 to 20 hours a week, and ran my business in between.

51
00:03:50.000 --> 00:03:56.999
The Lambda curriculum is completed in an Agile format.

52
00:03:57.000 --> 00:04:00.999
Each day is a module, each week a sprint, 
each unit four sprints.

53
00:04:01.000 --> 00:04:07.999
Every day, there are Minimum Viable Product (MVP) 
goals and one to five stretch goals due for that day's project.

54
00:04:08.000 --> 00:04:14.999
At the end of each week is a 'sprint challenge', 
which also has its own MVP and stretch goals.

55
00:04:15.000 --> 00:04:20.999
Every day, you complete a module retrospective 
and every week a sprint retrospective.

56
00:04:21.000 --> 00:04:25.999
Every day of the entire curriculum, you have 
both a stand-up with your team and team lead 

57
00:04:26.000 --> 00:04:31.999
and also a 1:1 with your team lead to 
go over your code, discuss blockers, and stuff like that.

58
00:04:32.000 --> 00:04:36.999
For 29 out of 31 weeks, I not only met MVP for each day, 

59
00:04:37.000 --> 00:04:41.999
but completed at least one stretch goal per day 
and in most cases multiple stretch goals.

60
00:04:42.000 --> 00:04:45.999
So I have lots of experience in Agile project management.

61
00:04:46.000 --> 00:04:50.999
For the entire program, we are required to use Git and GitHub 

62
00:04:51.000 --> 00:04:53.999
for version control with Lambda's Git flow process.

63
00:04:54.000 --> 00:04:59.999
I've had over 5,800 GitHub contributions 
in the last year, and all of them via Git, 

64
00:05:00.000 --> 00:05:02.999
so I also have lots of experience in Git.

65
00:05:05.000 --> 00:05:11.999
I read several books on the side during my 
time at Lambda; the Gang of Four design patterns book,

66
00:05:12.000 --> 00:05:18.999
Web Scalability for Startup Engineers by Artur Ejsmont, 
the Clean series by Bob Martin, 

67
00:05:19.000 --> 00:05:22.999
and I'm currently reading Agile Estimation 
and Planning by Mike Cohn.

68
00:05:24.000 --> 00:05:28.999
Next, let's go over some projects chronologically.

69
00:05:29.000 --> 00:05:33.999
For each one, I'll go over some features 
of the site or app, its tech stack, 

70
00:05:34.000 --> 00:05:35.999
technical challenges I ran into, 

71
00:05:36.000 --> 00:05:39.999
and how I went above & beyond the curriculum 
for that particular project.

72
00:05:40.000 --> 00:05:44.999
First, I'll go over the software I developed 
prior to Lambda.

73
00:05:45.000 --> 00:05:50.999
Frankly, it's probably my worst written code, 
being my first big project ever, 

74
00:05:51.000 --> 00:05:55.999
but I'm extremely proud of it because 
of how many problems I solved with it 

75
00:05:56.000 --> 00:05:57.999
and how much I learned developing it.

76
00:05:58.000 --> 00:06:02.999
As one might imagine, I use Word 
extensively for my business.

77
00:06:03.000 --> 00:06:06.999
I was working many hours, 
and doing many repetitive tasks, 

78
00:0607:.000 --> 00:06:10.999
and got tired of 
entering the same data into multiple places 

79
00:06:11.000 --> 00:06:16.999
and having to remember so many details that 
I felt could be automated with VBA.

80
00:06:17.000 --> 00:06:21.999
So I wrote some VBA macros to deal 
with a couple of problems, integrating Excel.

81
00:06:22.000 --> 00:06:26.999
Then I started writing little chunks 
of code for other issues and problems 

82
00:06:27.000 --> 00:06:30.999
I was having in my business 
that was causing me to have to work so much.

83
00:06:31.000 --> 00:06:35.999
I became very good at debugging because, 
if I couldn't figure it out on my own, 

84
00:06:36.000 --> 00:06:38.999
the feature simply wasn't going to happen.

85
00:06:39.000 --> 00:06:45.999
But at first, admittedly, sometimes it would 
take me days or weeks to figure something out.

86
00:06:46.000 --> 00:06:50.999
Eventually, stringing all these 
chunks of code together didn't make any sense.

87
00:06:51.000 --> 00:06:54.999
I needed a full program to manage my business, 
and I wanted to know more about 

88
00:06:55.000 --> 00:06:59.999
what Office does so I could automate 
absolutely everything possible in my business.

89
00:07:06.000 --> 00:07:07.999
So after studying, I took two to three buses 
to the library up in Shoreline for several weeks to 

90
00:07:08.000 --> 00:07:12.999
get Microsoft Office Master certifications because 

91
00:07:13.000 --> 00:07:15.999
the library system here
offers those tests for free.

92
00:07:16.000 --> 00:07:20.999
Then I used that knowledge to automate 
even more stuff in my business 

93
00:07:21.000 --> 00:07:24.999
and wrote a full-featured piece of software 
in Access with VBA and MySQL.

94
00:07:25.000 --> 00:07:30.999
It manages my entire transcript production workflow, 
my schedule, tracks communication, 

95
00:07:31.000 --> 00:07:36.999
and is integrated with many libraries such as 
WinSCP and Acrobat, among many other things.

96
00:07:37.000 --> 00:07:39.999
It even has a speech recognition component.

97
00:07:40.000 --> 00:07:46.999
I offer, for free because of VBA automation, 
transcript features that no one else does 

98
00:07:47.000 --> 00:07:51.999
like tables of authority, automatic citation, 
and hyperlinking of authority 

99
00:07:52.000 --> 00:07:56.999
such as case law, rules, regulations 
that are mentioned in transcripts, 

100
00:07:57.000 --> 00:08:02.999
which is something that attorneys charge their 
regular billable hourly rates for.

101
00:08:03.000 --> 00:08:08.999
Now, I need to briefly go over the 
general workflow of my business because 

102
00:08:09.000 --> 00:08:11.999
this will be relevant to a couple of projects later.

103
00:08:12.000 --> 00:08:18.999
This VB software was designed to match the 
production workflow of the business 

104
00:08:19.000 --> 00:08:21.999
using principles from the Getting Things Done system.

105
00:08:22.000 --> 00:08:26.999
I designed the production workflow before 
developing the software for my business by writing down 

106
00:08:27.000 --> 00:08:31.999
every single thing my business needed 
to do to produce a transcript in order 

107
00:08:32.000 --> 00:08:34.999
and developing a workflow based on that list.

108
00:08:35.000 --> 00:08:41.999
A job or transcript goes through four stages; 
intake, transcribe, audio-proof, & delivery.

109
00:08:43.000 --> 00:08:53.999
In stage 1, intake, the customer fills out 
the order form online, the info is sent to the back end, 

110
00:08:54.000 --> 00:08:59.999
& initial processing of the data happens, 
to include document creation, spelling confirmation, 

111
00:09:00.000 --> 00:09:03.999
& folders, files Word shorthand auto-generated.

112
00:09:04.000 --> 00:09:08.999
In stage 2, the audio is transcribed 
using my custom shorthand dictionary.

113
00:09:09.000 --> 00:09:18.999
I created this dictionary by analyzing 
over 10,000 transcript pages for word count 

114
00:09:19.000 --> 00:09:21.999
and developing shorthand based on that analysis.

115
00:09:22.000 --> 00:09:27.999
An example of such shorthand would be 
typing 'dout' for 'do you think', 

116
00:09:28.000 --> 00:09:31.999
where you type four letters, 
but 12 letters appear.

117
00:09:32.000 --> 00:09:35.999
This alone saves me untold amounts of time and effort.

118
00:09:36.000 --> 00:09:41.999
In stage 3, the shorthand is automatically 
translated & document auto-formatted 

119
00:09:42.000 --> 00:09:42.999
to a print-ready version.

120
00:09:43.000 --> 00:09:47.999
Hyperlinks & citations are auto-generated 
& confirmed via either 

121
00:09:48.000 --> 00:09:52.999
a database table, the CourtListener API, 
or by human Google search, 

122
00:09:53.000 --> 00:09:56.999
& then the document is proofed to audio by an actual human, 

123
00:09:57.000 --> 00:09:59.999
which is the gold standard in court transcription.

124
00:10:00.000 --> 00:10:09.999
Stage 4, delivery, includes generation of a word index 
& various transcript formats, ZIP files for client delivery.

125
00:10:10.000 --> 00:10:14.999
The invoice is settled, & last but not least 
the transcript is delivered to the customer.

126
00:10:15.000 --> 00:10:20.999
Everything I just described here as automated 
are features I developed in this software.

127
00:10:28.000 --> 00:10:33.999
Towards the end of the development of my Access program, 
I then wanted to 

128
00:10:34.000 --> 00:10:40.999
build a speech recognition engine with automatic 
transcript and audio feeding from my Access software 

129
00:10:41.000 --> 00:10:44.999
so that it would auto-learn from transcripts 
I had already produced 

130
00:10:45.000 --> 00:10:48.999
and also automatically produce transcripts 
with future audio, 

131
00:10:49.000 --> 00:10:54.999
and I actually did successfully do that with 
Audacity, VBA, batch files, and PocketSphinx.

132
00:10:55.000 --> 00:10:58.999
I even created an Access form for it, 
which you can see a portion of here.

133
00:10:59.000 --> 00:11:03.999
But sadly, PocketSphinx doesn't have nearly 
enough memory for what I need it to do, 

134
00:11:04.000 --> 00:11:08.999
and I haven't had time to go back and remedy that, 
but it is in my future plans.

135
00:11:11.000 --> 00:11:13.999
You can see the main window here.

136
00:11:14.000 --> 00:11:20.999
Each of the four stages is automated in the sense that, 
when I've completed my portion of the tasks for that stage, 

137
00:11:21.000 --> 00:11:29.999
I click the appropriate button and it will finish all the automated 
tasks I've programmed it to do, thereby moving it to the next stage

138
00:11:30.000 --> 00:11:35.999
You can see the general job information is here, 
and if I want to manually generate a document, 

139
00:11:36.000 --> 00:11:38.999
I simply select it from this menu and press the button.

140
00:11:39.000 --> 00:11:43.999
I have several other options on the left here 
for other business tasks that I can do, 

141
00:11:44.000 --> 00:11:46.999
like sending a price quote to a customer.

142
00:11:47.000 --> 00:11:55.999
I simply enter the audio amount and the turnaround time, 
the deadline, and click the button, 

143
00:11:56.000 --> 00:11:59.999
and it will give me a price quote with the option 
to generate an email for the price quote 

144
00:12:00.000 --> 00:12:03.999
as well as tell me if I can handle the job 
with my current schedule.

145
00:12:04.000 --> 00:12:09.999
This last feature helps me not overbook myself or overcommit, 
which is a problem that I had for many years.

146
00:12:10.000 --> 00:12:14.999
What I'm most proud of about this software is 
how many problems I solved in my business with it, 

147
00:12:15.000 --> 00:12:16.999
both business problems and personal weaknesses.

148
00:12:17.000 --> 00:12:21.999
Its future is uncertain at the moment 
since I am currently developing 

149
00:12:22.000 --> 00:12:25.999
updated and improved online versions of the same software.

150
00:12:26.000 --> 00:12:30.999
The next one I want to go over is my portfolio, 

151
00:12:31.000 --> 00:12:36.999
which was built with HTML, CSS, JavaScript, 
and the GitHub contributions calendar app.

152
00:12:37.000 --> 00:12:42.999
The portfolio is a work of art I created 
with a theme of Olympic National Park, 

153
00:12:43.000 --> 00:12:50.999
a beautiful and unique temperate rainforest just over on the 
peninsula from where I live that holds many amazing flora and fauna.

154
00:12:51.000 --> 00:12:54.999
I made this after the first Lambda unit to both 
solidify the skills I had just learned

155
00:12:55.000 --> 00:12:59.999 
as well as go above and beyond the curriculum 
with CSS animation.

156
00:13:00.000 --> 00:13:06.999
One day on Codepen, I saw so many amazing 
examples of complicated pure CSS animation 

157
00:13:07.000 --> 00:13:12.999
that I wanted my portfolio to have the same artsy look, 
but with a theme meaningful to me.

158
00:13:16.000 --> 00:13:18.999
So that's exactly what I did.

159
00:13:19.000 --> 00:13:21.999
I love Olympic National Park, so I did lots of research 

160
00:13:22.000 --> 00:13:28.999
on the various animals and plants there as well as 
the landscape in order to make a realistic scene.

161
00:13:29.000 --> 00:13:32.999
I used Illustrator to make the crab, the salmon, and the log.

162
00:13:33.000 --> 00:13:35.999
The water, beach, and sky were made using pure CSS.

163
00:13:36.000 --> 00:13:41.999
This page is very heavy on CSS animation, 
and as such is minimally responsive.

164
00:13:42.000 --> 00:13:46.999
But all the animation that you do see is pure CSS animation.

165
00:13:47.000 --> 00:13:51.999
The site has two responsive settings, mobile and desktop.

166
00:13:53.000 --> 00:13:58.999
You can toggle between sunny and twinkling starry skies, 

167
00:13:59.000 --> 00:14:03.999
and the cloud holds text that changes 
as you hover over different items.

168
00:14:04.000 --> 00:14:07.999
This happens all while a crab walks 
on the beach and salmon swim in the water.

169
00:14:08.000 --> 00:14:11.999
You can click on the different options 
on the beach sign to see different modals.

170
00:14:12.000 --> 00:14:20.999
My biggest technical challenge in this project 
was getting everything to line up properly.

171
00:14:21.000 --> 00:14:25.999
This is quite a few items to line up one behind the other 
and in exactly the right spot, 

172
00:14:26.000 --> 00:14:28.999
so most of my time on this project was spent doing just that.

173
00:14:32.000 --> 00:14:35.999
The next project I'll discuss is my company's website, 

174
00:14:36.000 --> 00:14:39.999
a very responsive website I built after unit one, 

175
00:14:40.000 --> 00:14:43.999
again to solidify my knowledge and go 
above and beyond the Lambda curriculum.

176
00:14:44.000 --> 00:14:50.999
Adam Ingram took the background image and 
designed all wooden ad images that you see on this website.

177
00:14:51.000 --> 00:14:56.999
I built the website using HTML, CSS, JavaScript, and LESS.

178
00:14:59.000 --> 00:15:09.999
This page features pure CSS gradients, a generally well-known 
overall site design, and a price quote calculator.

179
00:15:10.000 --> 00:15:17.999
All internal links on the main page are a pop-up 
to other hidden sections on the same page.

180
00:15:18.000 --> 00:15:24.999
As you saw, it contains animation in the showcase image 
and in each stripe going down the page.

181
00:15:25.000 --> 00:15:34.999
The code is separated into separate LESS files 
and uses several mixins; 

182
00:15:36.000 --> 00:15:41.999
one for animation, several for color manipulation 
according to color scheme, 

183
00:15:42.000 --> 00:15:45.999
some flexbox ones, and an order/z-index one.

184
00:15:46.000 --> 00:15:52.999
It has an image carousel to display pictures 
of unique transcript features, 

185
00:16:00.000 --> 00:16:13.999
an inside-out underline animation for links, a FAQ 
with expandable questions, and a sticky header menu.

186
00:16:14.000 --> 00:16:18.999
It's pretty responsive with desktop, tablet, and mobile versions.

187
00:16:24.000 --> 00:16:29.999
This site ranks in the 90th percentile in Google PageSpeed Insights, 

188
00:16:30.000 --> 00:16:35.999
and on Lighthouse reports ranks 90 in performance 
and 100 for accessibility, best practices, and SEO.

189
00:16:36.000 --> 00:16:42.999
It ranks on first-page results for "Seattle transcription" 
in Google and page two for Bing and Duckduckgo.

190
00:16:43.000 --> 00:16:47.999
This is the fourth iteration of the company website 
over its history, 

191
00:16:48.000 --> 00:16:51.999
so it's come a very long ways since its early days.

192
00:16:54.000 --> 00:16:59.999
On to the next project, once I started 
learning React in unit two and three, 

193
00:17:00.000 --> 00:17:04.999
I knew I wanted to take my Visual Basic database 
online and improve upon it.

194
00:17:05.000 --> 00:17:09.999
So when I learned Node for back end work 
in the fourth unit at Lambda, 

195
00:17:10.000 --> 00:17:17.999
I made a 126-endpoint, 23-table API built 
with Node, Express, Knex, bcrypt, and PostgreSQL.

196
00:17:18.000 --> 00:17:23.999
It is fully tested & documented with Postman 
& has third-party API support for CourtListener, 

197
00:17:24.000 --> 00:17:30.999
a wonderful publicly available case law API, 
Xero, PayPal, Wunderlist & Office.

198
00:17:31.000 --> 00:17:36.999
The back end adheres to RESTful API best practices 
& gold standards as much as possible.

199
00:17:37.000 --> 00:17:45.999
What you see here on the right is a sample response 
from one of the endpoints, and here is the schema.

200
00:17:46.000 --> 00:17:51.999
You can view a list of endpoints, full Postman documentation, 
the schema, a couple of UML diagrams 

201
00:17:52.000 --> 00:17:56.999
and the product vision document for the overall software 
in the readme if you want to check it out.

202
00:17:57.000 --> 00:18:03.999
It's intended to support a React-Redux-TypeScript front end, 
which is still in planning stages due to time constraints.

203
00:18:04.000 --> 00:18:07.999
This project goes above and beyond the Lambda curriculum because 

204
00:18:08.000 --> 00:18:12.999
it utilizes fairly advanced SQL statements via 
Knex query builder, and because 

205
00:18:13.000 --> 00:18:17.999
this back end was entirely 100 percent separately developed 
apart from school.

206
00:18:18.000 --> 00:18:21.999
I used my Lambda knowledge to solve actual real business problems by 

207
00:18:22.000 --> 00:18:28.999
making the back end portion of my earlier-developed VB software.

208
00:18:29.000 --> 00:18:34.999
My biggest technical challenge was putting all the pieces together 
in the right way 

209
00:18:35.000 --> 00:18:39.999
for this particular endpoint, and if you remember my spiel earlier 

210
00:18:40.000 --> 00:18:47.999
about the general flow of the business, you can see this endpoint's 
data is designed like that as well, in a similar way.

211
00:18:48.000 --> 00:18:53.999
In the future, I plan on adding search and sort parameters 
as well as testing via Cypress.

212
00:18:55.000 --> 00:18:59.999
Something else I did on the side at Lambda was take 
their Java back end curriculum.

213
00:19:00.000 --> 00:19:02.999
It was not an option when I began attending, 

214
00:19:03.000 --> 00:19:06.999
but normally you can choose one of two back end paths; 
Node or Java.

215
00:19:07.000 --> 00:19:12.999
So my only option was Node at the time, 
but nonetheless the curriculum was available for Java, 

216
00:19:13.000 --> 00:19:18.999
so I took the time to learn it on the side because 
I knew it would make me more valuable as a developer.

217
00:19:19.000 --> 00:19:26.999
After completing the curriculum, I then decided to make a version 
as identical as possible to the Node back end, only in Java.

218
00:19:27.000 --> 00:19:33.999
So this entire project and everything I learned in 
order to do it went above and beyond the curriculum.

219
00:19:34.000 --> 00:19:43.999
I built this back end with Java, SQL, Java Spring, 
JUnit 4, SLF4J, OAuth2, Swagger, PostgreSQL, and Maven.

220
00:19:44.000 --> 00:19:52.999
It has roughly the same schema and does roughly the same things, 
but with a couple of added user tables and features.

221
00:20:03.000 --> 00:20:11.999
In contrast to the Node back end, the Java version supports 
multiple emails per user and different user roles,

222
00:20:12.000 --> 00:20:17.999 
and its endpoints are more fully tested and support 
searching by different fields, sorting and query parameters, 

223
00:20:18.000 --> 00:20:20.999
which the Node back end doesn't have at this time.

224
00:20:21.000 --> 00:20:28.999
So the Java back end will have a few hundred more endpoints 
than the Node back end when complete for that reason.

225
00:20:30.000 --> 00:20:33.999
I actually like this back end more than the Node one because 

226
00:20:34.000 --> 00:20:35.999
of all its additional features.

227
00:20:36.000 --> 00:20:42.999
This back end, like the Node version, is intended 
to support the same React-Redux-TypeScript front end.

228
00:20:43.000 --> 00:20:50.999
This project was started during computer science, 
a few months after building the Node back end, and continues even now.

229
00:20:51.000 --> 00:21:01.999
You can visit the front end intended for these back ends at my GitHub, 
but it's still in planning stages, so I won't be covering it here.

230
00:21:02.000 --> 00:21:07.999
There is some documentation you can check out, 
including an Adobe XD design file for it.

231
00:21:09.000 --> 00:21:13.999
Now, we'll go over a couple of front end projects I've worked on.

232
00:21:14.000 --> 00:21:19.999
The first front end project I want to show you is a 
NASA Images Library clone using the NASA API.

233
00:21:20.000 --> 00:21:24.999
I love NASA, had never seen anybody do this 
particular clone before, 

234
00:21:25.000 --> 00:21:31.999
and the original was not in React, so I felt it was a 
great project to help me solidify my knowledge 

235
00:21:32.000 --> 00:21:39.999
and learn more above and beyond the curriculum after 
completing unit two and three, the React units in the Lambda curriculum.

236
00:21:40.000 --> 00:21:46.999
I built this using React, Redux, Styled Components, 
Video React, Axios, and Cypress.

237
00:21:47.000 --> 00:21:51.999
It also has a couple of animations, a rocket in the header 
and an astronaut in the footer.

238
00:21:57.000 --> 00:22:11.999
Now, it's mostly like the original, but I've improved it in a few ways.  
The original has tooltips to display extra info in search results, 
but my version has a grid view to eliminate tooltips for accessibility improvement. 

239
00:22:12.000 --> 00:22:19.999
Mine saves screen space over the original by not displaying 
duplicative information in certain places.  

240
00:22:21.000 --> 00:22:26.999
The original offers only three share options, whereas mine offers nine.  

241
00:22:27.000 --> 00:22:31.999
In the original, the search results always have a left-hand sidebar 

242
00:22:34.000 --> 00:22:39.999
which contains search features that are not available 
until after the first search, 

243
00:22:40.000 --> 00:22:46.999
but the clone has a full-featured search function always in header 
& available from the very first search.  

244
00:22:47.000 --> 00:22:50.999
So the left-hand sidebar is totally eliminated.  

245
00:22:53.000 --> 00:23:06.999
My biggest technical challenge on this project was 
the nesting and organization of components.  Here's the project.

246
00:23:07.000 --> 00:23:11.999
I spent several days on this and ended up collaborating 
with a Lambda colleague to solve this problem.

247
00:23:12.000 --> 00:23:17.999
This project really helped me solidify my React understanding 
a ton, as I struggled greatly 

248
00:23:18.000 --> 00:23:21.999
with understanding how it was organized and 
how data flowed through React apps.

249
00:23:22.000 --> 00:23:27.999
In a future release, I plan to complete Cypress testing and refactor 

250
00:23:29.000 --> 00:23:32.999
so it reflects what I've learned
since then and in the Clean series.

251
00:23:33.000 --> 00:23:38.999
I'd also like to draw some UML diagrams for it 
during the refactor just as a further learning exercise.

252
00:23:40.000 --> 00:23:41.999
Now we come to the Swaap app.

253
00:23:42.000 --> 00:23:47.999
In every track at Lambda, each student goes through 
an eight-week 'apprenticeship', called Labs.

254
00:23:48.000 --> 00:23:52.999
The student collaborates in two full continuous development cycles 

255
00:23:53.000 --> 00:23:57.999
using Agile methodology from design through deployment, 
working in cross-functional teams.

256
00:23:58.000 --> 00:24:02.999
The app I worked on in Labs was called Swaap, 
a way for people to gather, 

257
00:24:03.000 --> 00:24:05.999
to collect and stay in contact with people that you meet, 

258
00:24:06.000 --> 00:24:12.999
to make the social and connecting aspect of events 
effortless, seamless and fun to do, 

259
00:24:13.000 --> 00:24:17.999
to give courage and ability to less outgoing people 
to connect and network more comfortably, 

260
00:24:18.000 --> 00:24:22.999
to unify the social and personal networking aspect of events 

261
00:24:23.000 --> 00:24:25.999
and put that in the hands of participants instead of vendors.

262
00:24:26.000 --> 00:24:30.999
The tech stack for the front end, which is what I mostly worked on, 

263
00:24:31.000 --> 00:24:35.999
included React, Auth0, Reach Router, and Tailwind CSS.

264
00:24:36.000 --> 00:24:41.999
Some features include giving users the ability to connect 
with each other through the app, 

265
00:24:42.000 --> 00:24:46.999
getting and storing contacts in a fast and simple way, 
contact messaging ability, 

266
00:24:47.000 --> 00:24:49.999
and finding out where you met the contacts.

267
00:24:51.000 --> 00:24:57.999
My role in this project was to test all parts of landing page, 
make some styling changes, 

268
00:24:58.000 --> 00:25:17.999
and add a contacts search feature, assist in planning phase 
& creation of product vision, 

269
00:25:18.000 --> 00:25:22.999
and present release canvasses & product vision 
for approval to the product owner.

270
00:25:23.000 --> 00:25:26.999
The biggest challenges for me in Swaap were not so much technical, 

271
00:25:27.000 --> 00:25:36.999
but rather learning what to actually test and putting together 
a coherent, cohesive, concise presentation for a non-technical audience.

272
00:25:44.000 --> 00:25:49.999
Now, this project was a build week project 
during the two computer science units, 

273
00:25:50.000 --> 00:25:52.999
to build the famous Conway's Game of Life.

274
00:25:53.000 --> 00:25:56.999
Lambda encouraged everyone to build it 
in their core language, 

275
00:25:57.000 --> 00:26:01.999
which for me was JavaScript, because by that time 
we hadn't touched JavaScript in a couple of months.

276
00:26:02.000 --> 00:26:07.999
I built this for that assignment using 
React, Node-Canvas, and Styled Components.

277
00:26:08.000 --> 00:26:11.999
Our app had to meet several objectives 
which may be found in the repo.

278
00:26:13.000 --> 00:26:18.999
Additionally, the assignment was to implement 
three of a selection of seven features:  

279
00:26:19.000 --> 00:26:22.999
Create a few sample cell configurations 
that you can load and run

280
00:26:23.000 --> 00:26:27.999
Add an option that creates a random cell config 
that users can run

281
00:26:28.000 --> 00:26:32.999
Incorporate additional cell properties like color or size

282
00:26:33.000 --> 00:26:35.999
Allow users to specify simulation speed,

283
00:26:36.000 --> 00:26:38.999
Provide functionality to manually step through the simulation 

284
00:26:39.000 --> 00:26:40.999
one generation at a time, 

285
00:26:41.000 --> 00:26:44.999
Allow users to change the dimension and

286
00:26:45.000 --> 00:26:48.999
Allow users to skip ahead n generations

287
00:26:49.000 --> 00:26:52.999
So to go above and beyond the curriculum, 
we had to complete 

288
00:26:53.000 --> 00:26:55.999
at least one stretch goal from the following objectives:  

289
00:26:56.000 --> 00:27:03.999
Implement 2+ additional custom features 
from the previous list of MVP objectives

290
00:27:04.000 --> 00:27:05.999
Deploy your app to a hosting service

291
00:27:06.000 --> 00:27:08.999
Write a how-to guide or blog post 

292
00:27:09.000 --> 00:27:11.999
Expand your simulation into the third dimension.

293
00:27:12.000 --> 00:27:15.999
Explore alternate algorithms for finding the nth generation

294
00:27:23.000 --> 00:27:28.999
My project includes a gradient animation in the background, 
which I had never done before, 

295
00:27:29.000 --> 00:27:34.999
and selected features #1 through #6 
from the first list, MVP list,

296
00:27:35.000 --> 00:27:40.999
as well as #1 through #3 from the stretch goals list for my project.

297
00:27:41.000 --> 00:27:44.999
The big technical challenge for me on this project was 

298
00:27:45.000 --> 00:27:49.999
visualizing translating the game from my head into actual code, 

299
00:27:50.000 --> 00:27:54.999
which I overcame by simply just drawing out 
different aspects of this app on paper a lot.

300
00:27:55.000 --> 00:27:58.999
You can read more about my day-to-day for this project 

301
00:27:59.000 --> 00:28:03.999
and an overall report about Conway's Game of Life 
at the live web app.

302
00:28:04.000 --> 00:28:08.999
The last project I'll cover just briefly because 

302
00:28:09.000 --> 00:28:12.999
I learned some key things while completing this project.

303
00:28:13.000 --> 00:28:22.999
This API is a blog back end that I built with 
Node, Knex, Express, bcrypt, and PostgreSQL post-graduation.

304
00:28:23.000 --> 00:28:27.999
Like the previous Node back end I built, 
it is tested and documented in Postman, 

305
00:28:28.000 --> 00:28:33.999
and you can view all the documentation in the GitHub repo 
as well as a Postman collection of all the endpoints.

306
00:28:34.000 --> 00:28:38.999
There are two notable parts to this API; 
number one, I learned 

307
00:28:39.000 --> 00:28:42.999
how to cache endpoint responses and caching is a feature of this API, 

308
00:28:43.000 --> 00:28:49.999
and two, there are many query parameters 
for the GET endpoints in this back end.

309
00:28:50.000 --> 00:28:56.999
You can filter both authors and posts by tag, 

310
00:28:59.000 --> 00:29:05.999
and sort both authors and posts by their respective fields, 
ascending or descending.

311
00:29:06.000 --> 00:29:09.999
You can also search by each field, partial matches included.

312
00:29:10.000 --> 00:29:18.999
I also included most-liked and most-read endpoints, 
which returns a list of the 20 most liked or read posts.

313
00:29:23.000 --> 00:29:28.999
There are several other things I learned on the side 
over my time at Lambda besides Java.

314
00:29:29.000 --> 00:29:37.999
I learned TypeScript, Docker, UML, advanced Postman, 
advanced Agile methodology, 

315
00:29:38.000 --> 00:29:42.999
PowerShell, advanced Visual Basic, system design, scalability, 

316
00:29:43.000 --> 00:29:47.999
and object-oriented analysis and design,
including 23 design patterns.

317
00:29:48.000 --> 00:29:53.999
I also studied about 40-ish system designs 
to learn system architecture, 

318
00:29:54.000 --> 00:29:56.999
including Twitter, Netflix, Pastebin, and others.

319
00:29:57.000 --> 00:30:02.999
I completed the entire 2019 Master the Mainframe contest, 
parts one through three, 

320
00:30:03.000 --> 00:30:08.999
and a few other mainframe-related badges, 
and am working on the 2020 contest currently.

321
00:30:09.000 --> 00:30:15.999
I spent hundreds of hours doing Leetcode 
and Cracking the Coding Interview problems in Python 

322
00:30:16.000 --> 00:30:21.999
as well as reviewing both Anki flash cards I made 
and over 1,200 pages of handwritten notes.

323
00:30:22.000 --> 00:30:27.999
I've done research on how to be productive 
as quickly as possible at a new developer job, 

324
00:30:28.000 --> 00:30:31.999
how to get the most out of stand-ups and 1:1s, 
and things like this.

325
00:30:32.000 --> 00:30:37.999
What am I looking for in a career transition?  
Well, I am seeking a full-time position in 

326
00:30:38.000 --> 00:30:43.999
software engineering at a company that values diversity 
and offers good work-life balance.

327
00:30:44.000 --> 00:30:50.999
I plan on outsourcing all work in my business 
and developing my company's software on the side as a hobby 

328
00:30:51.000 --> 00:30:55.999
once I find the right position, 
so I won't be doing both jobs at the same time.

329
00:30:56.000 --> 00:31:02.999
My business workload is currently extremely reduced 
so I can devote my time to the job search, 

330
00:31:03.000 --> 00:31:05.999
and it will continue this way into the foreseeable future.

331
00:31:06.000 --> 00:31:14.999
In summary, during my time at Lambda, according to Sourcerer, 
I've written over 2.3 million lines of code 

332
00:31:15.000 --> 00:31:20.999
in over 5,800 GitHub contributions, and I have 
both leadership and real-world development 

333
00:31:21.000 --> 00:31:22.999
experience to draw from for my next venture.

334
00:31:23.000 --> 00:31:28.999
I've used what I learned both in and outside Lambda 
to solve real-world problems in unique projects.

335
00:31:29.000 --> 00:31:33.999
I've studied many things on the side, 
including several fundamental computer science books

336
00:31:34.000 --> 00:31:39.999 
outside the Lambda curriculum, 
and have moderate Agile and Git experience.

337
00:31:40.000 --> 00:31:44.999
I've received 14 references, seven on LinkedIn 
and seven more via Searchlight, 

338
00:31:45.000 --> 00:31:49.999
a third-party service which hides nearly all 
the recommender's content from the recommendee 

339
00:31:50.000 --> 00:31:54.999
in order to encourage candor, 
which may be sent on request via e-mail.

340
00:31:55.000 --> 00:31:56.999
Here are some examples of them.

341
00:32:02.000 --> 00:32:05.999
I'm a high-performing team player.
I learn quickly, and get results.

342
00:32:06.000 --> 00:32:10.999
As you can tell from this video, 
I will always bring my A game, and I will take my 

343
00:32:11.000 --> 00:32:17.999
resourcefulness, discipline, empathy, respect, 
problem-solving ability, teamwork, and grit with me wherever I land.

344
00:32:18.000 --> 00:32:23.999
You can contact me in the ways you see here, 
which are all provided on my portfolio below this video.

345
00:32:24.000 --> 00:32:26.000
Thanks for watching and have a great day.
